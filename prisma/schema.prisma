// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  role              String             
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  employees         Employee[]   
}


model Employee {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique
  user              User               @relation(fields: [userId], references: [id])
  email             String             @unique
  plant             String
  position          String
  interviewStatus   String
  interviews        Interview[]
  employeeTrainings EmployeeTraining[]
  interviewFollowups InterviewFollowup[]
  notification      Notification[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Interview {
  id            Int       @id @default(autoincrement())
  employeeId    Int
  employee      Employee  @relation(fields: [employeeId], references: [id])
  interviewDate DateTime
  questions     String
  answers       String
  evaluationResult String
  followups        InterviewFollowup[] 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Training {
  id            Int                @id @default(autoincrement())
  trainingType  String
  trainingDate  DateTime
  location      String
  employeeTrainings EmployeeTraining[]
  trainingModules  TrainingModule[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model EmployeeTraining {
  id             Int       @id @default(autoincrement())
  employeeId     Int
  employee       Employee  @relation(fields: [employeeId], references: [id])
  trainingId     Int
  training       Training  @relation(fields: [trainingId], references: [id])
  scheduledDate  DateTime
  completionStatus String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model TrainingModule {
  id          Int       @id @default(autoincrement())
  trainingId  Int
  training    Training  @relation(fields: [trainingId], references: [id])
  moduleName  String
  moduleType  String
  moduleUrl   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model InterviewFollowup {
  id            Int       @id @default(autoincrement())
  employeeId    Int
  employee      Employee  @relation(fields: [employeeId], references: [id])
  interviewId   Int
  interview     Interview @relation(fields: [interviewId], references: [id])
  followupDate  DateTime
  result        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Notification {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  employee     Employee  @relation(fields: [employeeId], references: [id])
  message      String
  status       String    @default("Unread")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
